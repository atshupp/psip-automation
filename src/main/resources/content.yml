# Definitions of activities, categories and items for the PSIP automation site.
# 
# Activity: An activity is a top level menu on the site nav bar that is displayed using the 'name' and 'icon' elements.
#           The page will display the 'description' along with a summary of each of the categories (see below) using
#           a progress bar element that indicates how close to completion the activity is. The pages can be directly
#           accessed using the 'path' element. Scores define the scores being used for assessment.
#
# Category: A category allows lower level pages to be grouped. The are normally the "Better ..." categories taken from
#           the BSSW web site, but could be other things. Category pages display the 'description' text along with a
#           score for of each of the items (see below) using a radial chart. The pages can be directly accessed using
#           the parent activity path concatenated with the 'path' element.
#
# Item:    An item is the lowest level page that is used for scoring or other information. Assessment items are displayed
#          using the scores from the parent activity, along with the corresponding items from the 'questions' element. The
#          pages can be directly access using the category path (see above) concatenated with the 'path' element.
#
#
# NOTE: Please preserve indenting! YAML only recognizes spaces for indents.
#
activities:
 - name: Assessment
   path: assessment
   icon: CLIPBOARD_CHECK 
   description: The assessment section is used to estimate the degree to which software engineering practices are currently being 
     used by your project. The table below shows your progress in each practice area. Click on the "Start Here" button to begin.
   scores:
    - name: Basic
      color: "#ff9933"
    - name: Intermediate
      color: "#99cc66"
    - name: Advanced
      color: "#066999"
     
   categories:
    - name: Better Development
      path: development
      description: Improving scientific software development—a process of writing, maintaining, and extending code—in order to 
        increase software productivity, quality, and sustainability, as key aspects of advancing overall scientific productivity. 
        The table below shows how well your team is doing for each practice. Click on the "Begin Assessment" button to start 
        assessing your skills.
      items:
       - name: Revision Control
         path: revision_control
         description: Approaches for managing changes to files (source code, documentation, data) as well as maintaining their history and attribution, 
           especially across multiple contributors and branches of development (also known as version control).
         questions:
          - Uses revision control system such as Git
          - Uses a basic development workflow (e.g. basic Git workflow)
          - Uses an advanced development workflow (e.g. Gitflow)
       - name: Code Reviews
         path: code_reviews
         description: The act of consciously and systematically convening with one''s fellow programmers to check each other''s code for mistakes, and has 
           been repeatedly shown to accelerate and streamline the process of software development like few other practices can.
         questions: 
          - Ad-hoc code reviews
          - Regular code reviews (e.g. weekly meetings)
          - Code reviews automated in workflow (e.g. via pull requests)
       - name: Issue Tracking
         path: issue_tracking
         description: The process of capturing, reporting, tracking, and managing information about issues related to software. Issues include bugs, 
           feature requests, missing documentation, and other problems and/or requirements.
         questions:
          - Manual issue tracking via email or other medium
          - Dedicated issue tracking system being used
          - Integrated issue tracking  (e.g. pull requests)
       - name: Deployment
         path: deployment
         description: Approaches for versioning, packaging, releasing, and deploying software, documentation, or data for users to then obtain, install, and use.
         questions:
          - Manual deployment using a script
          - Deployment as part of development workflow with manual intervention
          - Continuous deployment
       - name: Documentation
         path: documentation
         description: Creating, maintaining, and hosting quality documentation (written text or illustration) about the use, operation, or design of software.
         questions:
          - Ad-hoc text files
          - Code and documentation are cross referenced and updated when committed to repository
          - Integrated with the package release workflow

    - name: Better Planning
      path: planning
      description: Improving strategies for planning in order to increase software productivity, quality, and sustainability, while underscoring the 
        unique characteristics of scientific software, including that requirements often change during discovery. The table below shows how well your team
        is doing for each practice. Click on the "Begin Assessment" button to start assessing your skills.
      items:
       - name: Development Process
         path: development_process
         description: The software development life cycle is the process of dividing software development work into distinct phases to improve design, product management, and project management.
         questions:
          - Has development process but it is based on ad-hoc rules
          - Employs an iterative development process
          - Uses an agile development methodology

       - name: Due Diligence
         path: due_diligence
         description: Tracking and managing contributions to software.
         questions:
          - Formal guidelines for accepting contributions
          - Clearly defined standards for coding and documentation
          - Provenance and license checking for contributions

       - name: Software Design
         path: software_design
         description: Major considerations in designing software to meet its scientific objectives and sustainability goals. Because requirements for 
           scientific software often change during scientific discovery, design tends to evolve over time.
         questions:
          - Development guidelines include design in the process
          - A modeling language is employed for key aspects of the project
          - Visual modeling using a graphical representation to capture design

       - name: Onboarding
         path: onboarding
         description: The process of integrating a new employee into an organization or familiarizing a new customer or client with one''s products or services.
         questions:
          - Initial onboarding process is documented
          - Used for supervisors for new hires
          - Used for all personnel changes

       - name: Requirements Analysis
         path: requirements_analysis
         description: Statements about what functions a software product shall perform, including any constraints under which it shall operate but 
           avoiding as much as possible entanglements in how it shall be implemented.
         questions:
          - Development guidelines include requirements gathering
          - Formal requirements gathering is undertaken as part of the project
          - Requirements management process is employed

    - name: Better Performance
      path: performance
      description: Improving strategies for writing scientific software that is efficient, scalable, and portable—from laptops to emerging extreme-scale 
        architectures—while preserving other code quality metrics such as correctness and usability. The table below shows how well your team
        is doing for each practice. Click on the "Begin Assessment" button to start assessing your skills
      items: []

    - name: Better Reliability
      path: reliability
      description: Improving methods of testing and verification to ensure that software is robust and produces reliable results, thereby 
        helping to ensure the integrity of research and enable collaboration across teams. The table below shows how well your team
        is doing for each practice. Click on the "Begin Assessment" button to start assessing your skills.
      items:
       - name: Testing
         path: testing
         description: The process of ensuring that a software product is meeting its requirements at each stage of development, delivery, and deployment. 
           Testing helps to avoid defects and verify correctness.
         questions:
          - Comparison used to create system-level no-change tests
          - Unit testing for refactored and new code
          - Continuous integration

       - name: Reproducibility
         path: reproducibility
         description: Any effort whose goal is to increase trustworthiness and reuse of computational capabilities and results and to ensure correctness.
         questions:
          - Publication of code
          - Inclusion of data when code is published
          - Automatic provenance capture system is employed

    - name: Better Collaboration
      path: collaboration
      description: Improving ways to facilitate work across teams and to promote partnerships and community contributions via software. 
        We consider projects of all sizes, from small teams through multi-institutional aggregate teams. The table below shows how well your team
        is doing for each practice. Click on the "Begin Assessment" button to start assessing your skills.
      items: []

#
# These activities have not been defined yet
#

 - name: Tracking
   path: tracking
   icon: TASKS
   description: The tracking section is used to estimate the degree to which software engineering practices are currently being used by your project.
   scores: []
   categories: []
   
 - name: Integration
   path: integration
   icon: COGS
   description: The integration section is used to aid the integration of progress tracking cards into your development workflow.
   scores: []
   categories: []
